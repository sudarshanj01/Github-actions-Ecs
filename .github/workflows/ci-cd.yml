name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: my-ecr-repo
  ECS_SERVICE: my-ecs-service
  ECS_CLUSTER: my-ecs-cluster
  CONTAINER_NAME: my-container

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Update ECS service
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
                               --service ${{ env.ECS_SERVICE }} \
                               --force-new-deployment

    - name: Wait for ECS service to stabilize
      run: |
        aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} \
                                     --services ${{ env.ECS_SERVICE }}

    - name: Get running task IP
      id: get-task-ip
      run: |
        TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --query 'taskArns[0]' --output text)
        ENI_ID=$(aws ecs describe-tasks --cluster ${{ env.ECS_CLUSTER }} --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
        PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        curl -f http://$PUBLIC_IP || exit 1

    - name: Rollback on failure
      if: failure()
      run: |
        # Rollback to the previous task definition
        TASK_DEFINITION=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} \
                                                    --services ${{ env.ECS_SERVICE }} \
                                                    --query 'services[0].taskDefinition' \
                                                    --output text)
        PREVIOUS_REVISION=$(($(echo $TASK_DEFINITION | awk -F':' '{print $2}') - 1))
        PREVIOUS_TASK_DEFINITION="${TASK_DEFINITION%:*}:$PREVIOUS_REVISION"
        
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
                               --service ${{ env.ECS_SERVICE }} \
                               --task-definition $PREVIOUS_TASK_DEFINITION \
                               --force-new-deployment
